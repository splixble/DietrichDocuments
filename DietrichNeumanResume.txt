Dietrich Neuman
2950 Southeast Yamhill Street
Portland, Oregon 97214
Phone: (206) 930-7266
Email: DietrichNeuman@gmail.com


PROFESSIONAL SUMMARY 
Full-stack software developer with over 30 years’ experience developing Window applications, at all layers and stages:
•	UI design and implementation, in C# .NET, VB, C++, JavaScript, and other languages
•	Database definition and administration, in SQL Server, Access, and other SQL platforms
•	Documentation, configuration management, and testing
Whether working from a formal specification or an ad-hoc user request, I have always aimed to make software easier and more powerful for the user.
PROFESSIONAL EXPERIENCE 
Senior Consultant (software engineer)	July 2021 – present
CGI 	Montreal, Quebec (remote from Portland) 
Consulting assignment for Nexelis, a Q² Solutions Company, Seattle, Washington
Designed, implemented, and maintained Winforms C# .NET applications with SQL Server back-ends for a clinical research laboratory, which used reusable code libraries I had written as a Nexelis employee. (C#, .NET 4.8, SQL, T-SQL, MS SQL Server 2019, Git)
Reworked in-house applications and software libraries I had written at Nexelis, replacing their database back-end (Advanced Revelation) with a SQL Server back-end, and adapting them to a new laboratory and IT environment.(C#, .NET 4.8, SQL, T-SQL, MS SQL Server 2019, Revelation, Perforce, Git)  
Maintained in-house applications I had written as a Nexelis employee. (C#, .NET 4.8, SQL, T-SQL, Visual Basic for Applications (VBA), MS SQL Server 2005/2014, Revelation, Crystal Reports for .NET, Perforce)
As part of decommissioning of the Nexelis Seattle lab, migrated data, software, and processes to a recently created laboratory and IT environment, while assisting in the initial setup of the environment. (C#, .NET 4.8, SQL, T-SQL, MS SQL Server 2019, Revelation, Perforce, Git)

Senior Software Engineer	September 2005 – July 2021
Nexelis, a Q² Solutions Company	Seattle, Washington 
Designed and implemented Winforms C# .NET in-house applications with SQL Server back-ends for a clinical research laboratory, for purposes that included clinical study setup, clinical data extraction, project management, financial projection, system access privilege management, logging usage of applications by users, and more. Developed reusable code libraries for these applications, which provided the following features:
•	Forms.NET user interface with data binding
•	Multi-level data security based on Windows Login credentials
•	Paginated images of forms and DataGridView objects for printing
•	DataGridView object data exportable to XML Excel spreadsheet documents
(C#, .NET 2.0/3.5/4.0/4., SQL, T-SQL, Visual Basic for Applications (VBA), MS SQL Server 2005/2014, Revelation, COM/OLE, Crystal Reports for .NET, Perforce)  
Designed, implemented, and administered SQL Server databases used by the in-house applications I developed, with C# assemblies, triggers, and other advanced features. (MS SQL Server 2005/2014)
Developed a 21 CFR Part 11-compliant database client application in C#/.NET 2.0, and a SQL Server 2005 database, to monitor refrigeration unit temperatures and present aggregated data, for regular review and auditing, in Forms.NET forms and SQL Server Reporting Services reports. (C#, .NET 2.0, MS SQL Server 2005, SQL Server Reporting Services, Perforce)  
Designed and implemented a Mirror Database, a dynamically maintained read-only database that mirrors the data in the tables in the company’s laboratory information system (LIS), generating TSQL scripts that convert the table records from Revelation format to SQL Server. (C#, .NET, TSQL, MS SQL Server 2005/2014, Revelation, Revelation BASIC+)
Designed and implemented an Audit Logging system, to capture each data change in SQL Server tables and log it in another SQL Server table, at either the .NET application end or the SQL Server end (TSQL Trigger code). (C#, .NET, TSQL, MS SQL Server)
Wrote Javascript code to generate dynamic HTML in the company’s website. (Javascript, DHTML)
Created a utility in Visual Basic Script to generate and print bar-code labels from data read from text files. (Visual Basic Script 6.0)
Maintained code of a smartphone application for both the Android and iPhone platforms. (Windows 7, Java, Objective C)
Created the company’s first software development environment by acquiring and configuring Visual Studio 2005, SQL Server 2005, and Perforce.
Wrote 21 CFR Part 11-compliant validation documentation for a laboratory information system, and for several laboratory instrument data interfaces. (Microsoft Word, Microsoft Visio)

Programmer-Writer	June 2005 – August 2005
Sakson & Associates (agency)	Seattle, Washington
Contracted to Microsoft Corporation, Redmond, Washington 
Wrote and edited Microsoft ADO.NET documentation, which is published in application help files and MSDN. Maintained OLE DB and ODBC documentation. Corrected and clarified documentation in response to documentation change requests. Resolved documentation issues by creating test applications and communicating with developers. (C#, C++ .NET, Visual Basic .NET Framework 2.0, ADO.NET, OLE DB, SQL Server 2005, XML, DocStudio, Product Studio)  
Wrote and maintained sample applications used in published ADO.NET documentation, in C#, C++ .NET, and Visual Basic .NET, using SQL Server 2005. (C#, C++ .NET, Visual Basic .NET Framework 2.0, ADO.NET, SQL Server 2005, Source Depot)  

Software Development Engineer in Test	February 2004 – February 2005
Excell Data Corporation (agency)	Bellevue, Washington
Contracted to Microsoft Corporation, Redmond, Washington 
Designed and wrote a QA tool to visually represent trends in automated test results, based on data loaded from various XML/Web data sources. Wrote first version as a Perl script that generates HTML web pages, later adding interactive capabilities with Javascript. Rewrote the tool as a C# .NET Framework solution, and integrated it with other .NET components used in the development of Microsoft’s Visual Studio .NET product. Using the tool, uncovered several previously unnoticed problems in both software and testing platforms. (C#, .NET Framework, XML, Perl, DHTML, JavaScript)
Developed other QA tools as well in C#, Perl, and NT Batch script, resulting in considerable streamlining of the test failure analysis process. (C#, .NET Framework, XML, Perl)
Monitored automated test runs of Phoenix, a platform for compiler design and analysis. Reproduced, simplified, and diagnosed test failures, then wrote them up as bug reports. (Visual C++ .NET, Managed C++, C#, MSIL, Perl, NT batch script, Product Studio, WinDbg, Source Depot)

Software Development Engineer	April – October 2003
Franklin Revere	Seattle, Washington
Developed server software in Perl and C++ for internet-based consumer financial service. (Perl, Visual C++, ATL, cURL, OpenSSL)

Freelance Software Developer and Consultant	January 2002 – August 2003
Dietrich Neuman Software Services	Portland, Oregon 
Designed and developed professional websites for clients, with CGI scripting in Perl, interaction with third-party database hosts. (Dreamweaver 4.0, Javascript, Perl, Paint Shop Pro 7.0, PhotoFinish, HTML)
Designed and developed inventory tracking systems for art and antique dealers: MS Access databases integrated with a web-based catalog system and Excel. (MS Access 2000, Visual Basic 6.0, SQL, Perl, MS Excel, Dreamweaver 4.0) 

Software Development Engineer	February – September 2001
Professional Data Exchange, Inc. (ProDX)	Portland, Oregon
Consulting assignment for Metro One Telecommunications, Beaverton, Oregon
Developed an Internet client application that synchronizes data between web server and Personal Information Manager (PIM) applications such as Microsoft Outlook.  Wrote reusable Utilities DLL as well.  (Visual C++, MFC, WinInet, Puma Intellisync SDK)
As the team's senior C++/MFC engineer, provided technical advice and guidance to teammates on a daily basis. (Visual C++, MFC)

E-Commerce Software Engineer	June 1999 – October 2000
Harland Financial Solutions	Portland, Oregon
Developed and maintained the following Internet banking software, at up to four concurrent release levels:
•	GUI application for remote administration of the financial transaction server
•	COM/DCOM client and server middleware components, to perform the app's financial and database transactions and handle requests from web server
•	"Pluggable" DLL components for the app; architected the SDK library for development of the DLL's
(Visual C++, MFC, STL, COM, DCOM, SQL Server)

Software Engineer	August 1998 – April 1999
AZAD Technology Partners (agency)	Beaverton, Oregon
Contracted to Mentor Graphics, Wilsonville, Oregon 
Developed QA software for Falcon Framework, a software library used by commercial circuit board design and verification applications on several UNIX platforms and Windows NT. Ported QA suites from UNIX to NT. Cleaned up earlier porting work to make QA suites portable, automatic, and able to be run predictably and easily. Systematized and documented building and testing procedures.  (HPUX, Solaris, SunOs, NuTCracker, C++, Korn shell, TET, gmake, CVS, HTML)
Corrected software defects on NT and UNIX platforms.  Maintained code revision streams in CVS, branching and merging changes by off-site developers after deducing their baseline revision level. (CVS) 

Software Engineer	June 1995 – August 1998
Aerotek (agency)	Beaverton, Oregon
Contracted to USNR, Woodland, Washington
Primary engineer for a Windows NT-based, networked table editing system.  Designed and wrote first version entirely, then carried development through to the first several customer releases.  It featured: 
•	Multi-threaded network client layer, to send and receive tables (structure and data) originating on various Ethernet-linked hardware systems, using TCP-IP sockets and an in-house client-server protocol 
•	Windows-standard user interface, with extension DLL libraries to represent table data graphically
•	Data storage in SQL database tables, via ODBC interface
•	An installation package I developed with InstallShield 
(Visual C++ 4.0 with MFC, ODBC, Objective Grid, InstallShield)
Designed and wrote multi-threaded utility on VAX ELN to maintain persistent socket connections and establish client-server relationships between network nodes.  Using that utility, wrote a server to exchange tables between the aforementioned table editor and a 10-year-old legacy system on VAX ELN.  Created several other VAX ELN-based servers used by other NT-based client applications.  (VAX ELN, Pascal)

Quality Assurance Engineer	February – September 1994
DPI Services	San Jose, California
Contracted to Magellan Communications, Sunnyvale, California
Created a system of formal quality assurance for a phone mail hardware/software system.  This included a 170-page test plan covering functional specification compliance, and several portable C programs to test low-level functions and simulate normal usage of the system.  (QNX, PDP-11, C)
Maintained and debugged source code, and integrated several engineers' code changes into an RCS source code control system.  Maintained Makefiles. (QNX, C, RCS, make)

Software Engineer	September 1991 – July 1993
National Information Systems, Inc.	San Jose, California
Designed and implemented a client-server interface for RDM, a multi-platform relational database and application development system with over 1000 installations.  This interface enables RDM to access remote RDM and ORACLE database tables over DECNET and other networks.  (VMS, C, Embedded SQL, ORACLE, DECNET, VMS RTL and System Services, p2c)
Ported RDM from VAX VMS to Alpha AXP OpenVMS.  (C, Pascal, VMS System Services)
Performed extensive debugging of RDM, involving every level of development from assembler code to customers' developed applications.  Responsible for all maintenance development of RDM under VMS.  (VMS, MS-DOS, UNIX, C, Pascal, VAX Macro, VMS System Services, VMS Debugger, CodeView)
Developed new features, enhancements, and innovations to RDM, including screen refresh optimization, control-C trapping, and multi-user record access. (C, Pascal, VMS System Services, VMS RMS)
Created and maintained RCS-based source control system in VAX DCL for RDM. (VMS, RCS, DCL)
Lead customer support engineer for ProRDM, a high-level language interface for RDM.   Performed telephone, dial-up, written, and on-site support services.  (VMS, RDM, MS-DOS, Novell)

Software Engineer, Technical Writer	June 1986 – August 1991
Interactive Technology, Inc.	Beaverton, Oregon
Maintained, debugged, and wrote enhancements to RDM, as at NIS.  Quality Assurance Manager and Release Engineer for three major releases of RDM, and lead customer support engineer for ProRDM.  (VMS, MS-DOS, UNIX, RSX, TSX, RSTS, Pascal, C, VAX Macro, DEC Test Manager)
Designed and implemented enhanced B*tree indexing system for RDM.  (Pascal, VMS RMS) 
Primary author of Skylight Guide to Application Programming, a guide to a commercial API toolkit for developing object-oriented graphical user interface (GUI) applications.  Editor and co-author of three other volumes of Skylight documentation totaling over 450 pages.  (C)
EDUCATION 
BS in Computer and Information Science, minors in Mathematics and English
University of Oregon, Eugene, Oregon 1986

