// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace WebCoreSongs.Models;

public partial class SongsContext : DbContext
{
    public SongsContext(DbContextOptions<SongsContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Alternateartists> Alternateartists { get; set; }

    public virtual DbSet<Artists> Artists { get; set; }

    public virtual DbSet<Venues> Venues { get; set; }

    public virtual DbSet<Viewsongperformances> Viewsongperformances { get; set; }

    public virtual DbSet<Viewsongperformancetotals> Viewsongperformancetotals { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Alternateartists>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_alternateartists_ID");

            entity.ToTable("alternateartists", "songbook");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.SongId).HasColumnName("SongID");

            entity.HasOne(d => d.Artist).WithMany(p => p.Alternateartists)
                .HasForeignKey(d => d.ArtistId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("FK_AlternateArtists_ArtistID");
        });

        modelBuilder.Entity<Artists>(entity =>
        {
            entity.HasKey(e => e.ArtistId).HasName("PK_artists_ArtistID");

            entity.ToTable("artists", "songbook");

            entity.Property(e => e.ArtistId).HasColumnName("ArtistID");
            entity.Property(e => e.ArtistFirstName).IsUnicode(false);
            entity.Property(e => e.ArtistLastName).IsUnicode(false);
        });

        modelBuilder.Entity<Venues>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PK_venues_ID");

            entity.ToTable("venues", "songbook");

            entity.Property(e => e.Id).HasColumnName("ID");
            entity.Property(e => e.Comment)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValueSql("(NULL)");
            entity.Property(e => e.Name)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Viewsongperformances>(entity =>
        {
            entity
                .ToView("viewsongperformances", "songbook");

            entity.Property(e => e.Comment)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.DidIlead).HasColumnName("DidILead");
            entity.Property(e => e.PerfComment)
                .HasMaxLength(250)
                .IsUnicode(false);
            entity.Property(e => e.PerfID).HasColumnName("PerfID");
            entity.Property(e => e.PerformanceId).HasColumnName("PerformanceID");
            entity.Property(e => e.PerformanceMonth).HasMaxLength(101);
            entity.Property(e => e.PerformanceQtr).HasMaxLength(101);
            entity.Property(e => e.SongPerfID).HasColumnName("SongPerfID");
            entity.Property(e => e.TitleAndArtist)
                .HasMaxLength(8000)
                .IsUnicode(false);
            entity.Property(e => e.VenueName)
                .IsRequired()
                .HasMaxLength(100)
                .IsUnicode(false);
        });

        modelBuilder.Entity<Viewsongperformancetotals>(entity =>
        {
            entity
                .ToView("viewsongperformancetotals", "songbook");

            entity.Property(e => e.FirstPerformed).HasColumnName("firstPerformed");
            entity.Property(e => e.LastPerformed).HasColumnName("lastPerformed");
            entity.Property(e => e.SongId).HasColumnName("SongID");
            entity.Property(e => e.TitleAndArtist)
                .HasMaxLength(8000)
                .IsUnicode(false);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}