@model PerformanceEditViewModel

@{
    PerformanceEditViewModel perfModel = (PerformanceEditViewModel)Model;
    string heading = "Performance";

    ViewData["Title"] = heading;
}

<h1>@heading</h1>
<div class="row">
    <div class="col-md-4">
        <form asp-action="PerformanceEditSave">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="PerformanceDate" class="control-label"></label>
                <input asp-for="PerformanceDate" class="dietrich-control" disabled="@(perfModel._CanEditSongPerformance)" />
                <span asp-validation-for="PerformanceDate" class="text-danger"></span>
            </div>

            <div class="form-group">
                <label asp-for="Venue" class="control-label"></label>
                    @DHtml.TypeInLookup("PerfVenue", "Venue", perfModel.Venue, perfModel._VenuesList, "Id", "Name")
                    @* NOTE: this is the code replaced by the TypeInLookup:
                Alternate Venue ctrl DIAG!!!!
                    <input asp-for="Venue" id="venueID" class="dietrich-control" hidden />

                    @{
                        string initialValue = "";
                        Venues venRow = perfModel._VenuesList.Find(venRow => venRow.Id == perfModel.Venue);
                        if (venRow != null)
                            initialValue = venRow.Name;
                    }
                    <input id="altVenue" list="venues" name="venue"
                           onchange="OnTypeInLookupChanged('altVenue', 'venueID', 'venues')"
                           value = "@initialValue"
                        />

                    <datalist id="venues">
                        @foreach (var venueRow in perfModel._VenuesList)
                        {
                            <option value="@venueRow.Name" dbkey="@venueRow.Id"></option>
                        }
                    </datalist>

                    DIAG end of replaced code *@
            </div>
            <div class="form-group">
                <label asp-for="Comment" class="control-label"></label>
                <input asp-for="Comment" class="dietrich-control" disabled="@(perfModel._CanEditSongPerformance)" />
                <span asp-validation-for="Comment" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Series" class="control-label"></label>
                <input asp-for="Series" class="dietrich-control" disabled="@(perfModel._CanEditSongPerformance)" />
                <span asp-validation-for="Series" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="PerformanceType" class="control-label"></label>
                <input asp-for="PerformanceType" class="dietrich-control" disabled="@(perfModel._CanEditSongPerformance)" />
                <span asp-validation-for="PerformanceType" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="DidIlead" disabled="@(perfModel._CanEditSongPerformance)" /> @Html.DisplayNameFor(model => model.DidIlead)
                </label>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>
                Song
            </th>
            <th>
                Comment
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in perfModel._SongPerfList)
        {
            <tr>
                @if (item.Id == perfModel._SelectedSongPerfID)
                {
                    <form asp-action="PerformanceEditSaveSong">
                        <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                        <input type="hidden" asp-for="SongPerf_Id" />
                        <input type="hidden" asp-for="Id" /> @*is this also needed so that it'll have perf ID?*@
                    <td>
                            @DHtml.TypeInLookup("SongSelection", "SongPerf_Song", item.Song, perfModel._SongsList, nameof(Viewsongssinglefield.Id), nameof(Viewsongssinglefield.TitleAndArtist))

                            @* REPLACES THIS CODE:
                            <select asp-for="SongPerf_Song" class="dietrich-control"
                            asp-items="@(new SelectList(perfModel._SongsList, nameof(Viewsongssinglefield.Id), nameof(Viewsongssinglefield.TitleAndArtist)))">
                            </select>
                            *@

                            @* before that it was: 
                                was: <input asp-for="SongPerf_TitleAndArtist" class="dietrich-control" disabled="@(item.SongPerfID != perfModel._SelectedSongPerfID)" 
                                or @Html.DisplayFor(modelItem => item.TitleAndArtist);
                                need: Disabled if 
                                DIAG probly want to construct SelectList in Controller?
                            /> *@
                        </td>
                        <td>
                            @if (item.Id == perfModel._SelectedSongPerfID)
                            {
                                <input asp-for="SongPerf_Comment" class="dietrich-control" disabled="@(!perfModel._CanEditSongPerformance)" />
                                @*@Html.DisplayFor(modelItem => perfModel.SongPerf_Comment)*@
                            }
                            else
                                @Html.DisplayFor(modelItem => item.Comment)
                        </td>
                        <td>
                            <input type="submit" value="Save Song" class="btn btn-primary" />
                        </td>
                    </form>
                }
                else
                {
                    <td>
                        @* Display looked-up version of field value:
                        was: Html.Raw(perfModel._SongRowsByID[item.Song].TitleAndArtist);
                        the following works, but it's dangerous, no? bad chars in HTML? but the helper funcs dont display anything! DIAG?? *@
                        @(perfModel._SongRowsByID[item.Song].TitleAndArtist)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Comment)
                    </td>
                    <td>
                        @* no longer use this overcomplicated BS: <a asp-action="Edit" asp-route-id="@item.PerfID">Edit</a>*@ |
                        <a href="/DBPage/PerformanceEdit/@item.Performance/true/@item.Id">Edit</a>
                    </td>
                }
            </tr>
        }
    </tbody>
</table>
<p>
    @* was" "<a asp-action="CreatePerformance">Create New</a>
    // DIAG try 0 instead of -1 to indicate null value
    *@
    <a href="/DBPage/PerformanceEdit/@perfModel.Id/true/0">Add Song</a>
</p>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script type="text/javascript">
    function ShowKeyboard() 
    {
        document.getElementById("DIAG").style.backgroundColor = "red";
    }
    </script>

    <script type="text/javascript">
    function OnVenueBlur() {
        alert("Wakajawaka!!")
    }
    </script>

    <script type="text/javascript">
    function OnTypeInLookupChanged (textCtrlID, hiddenCtrlID, lookupDataListID)
    {
        // DIAG this should go in a common, reusable module

        // alert("DEBUG OnTypeInLookupChanged");

        var textCtrl = document.getElementById(textCtrlID);
        var hiddenKeyCtrl = document.getElementById(hiddenCtrlID);
        var lookupDataList = document.getElementById(lookupDataListID);

            // alert("DEBUG list sz=" + lookupDataList.options.length + " val=" + textCtrl.value)
            
            for (var i = 0; i < lookupDataList.options.length; i++) {
            if (lookupDataList.options[i].value == textCtrl.value) 
            {
                var dbKeyValue = lookupDataList.options[i].getAttribute("dbkey");

                // set value on hidden ctrl:
                hiddenKeyCtrl.value = dbKeyValue;
                break;
            }
        }
    }
    </script>
}

