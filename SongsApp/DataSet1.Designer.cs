//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.42
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace Songs {
    using System;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("DataSet1")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSet1 : System.Data.DataSet {
        
        private songsDataTable tablesongs;
        
        private artistsDataTable tableartists;
        
        private flagsDataTable tableflags;
        
        private ViewArtistNameForListBoxDataTable tableViewArtistNameForListBox;
        
        private flaggedsongsDataTable tableflaggedsongs;
        
        private ViewTOCArtistDataTable tableViewTOCArtist;
        
        private ViewTOCTitleDataTable tableViewTOCTitle;
        
        private ViewSongsDataTable tableViewSongs;
        
        private ViewSongsSingleFieldDataTable tableViewSongsSingleField;
        
        private System.Data.SchemaSerializationMode _schemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSet1() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSet1(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["songs"] != null)) {
                    base.Tables.Add(new songsDataTable(ds.Tables["songs"]));
                }
                if ((ds.Tables["artists"] != null)) {
                    base.Tables.Add(new artistsDataTable(ds.Tables["artists"]));
                }
                if ((ds.Tables["flags"] != null)) {
                    base.Tables.Add(new flagsDataTable(ds.Tables["flags"]));
                }
                if ((ds.Tables["ViewArtistNameForListBox"] != null)) {
                    base.Tables.Add(new ViewArtistNameForListBoxDataTable(ds.Tables["ViewArtistNameForListBox"]));
                }
                if ((ds.Tables["flaggedsongs"] != null)) {
                    base.Tables.Add(new flaggedsongsDataTable(ds.Tables["flaggedsongs"]));
                }
                if ((ds.Tables["ViewTOCArtist"] != null)) {
                    base.Tables.Add(new ViewTOCArtistDataTable(ds.Tables["ViewTOCArtist"]));
                }
                if ((ds.Tables["ViewTOCTitle"] != null)) {
                    base.Tables.Add(new ViewTOCTitleDataTable(ds.Tables["ViewTOCTitle"]));
                }
                if ((ds.Tables["ViewSongs"] != null)) {
                    base.Tables.Add(new ViewSongsDataTable(ds.Tables["ViewSongs"]));
                }
                if ((ds.Tables["ViewSongsSingleField"] != null)) {
                    base.Tables.Add(new ViewSongsSingleFieldDataTable(ds.Tables["ViewSongsSingleField"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public songsDataTable songs {
            get {
                return this.tablesongs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public artistsDataTable artists {
            get {
                return this.tableartists;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public flagsDataTable flags {
            get {
                return this.tableflags;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewArtistNameForListBoxDataTable ViewArtistNameForListBox {
            get {
                return this.tableViewArtistNameForListBox;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public flaggedsongsDataTable flaggedsongs {
            get {
                return this.tableflaggedsongs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewTOCArtistDataTable ViewTOCArtist {
            get {
                return this.tableViewTOCArtist;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewTOCTitleDataTable ViewTOCTitle {
            get {
                return this.tableViewTOCTitle;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewSongsDataTable ViewSongs {
            get {
                return this.tableViewSongs;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ViewSongsSingleFieldDataTable ViewSongsSingleField {
            get {
                return this.tableViewSongsSingleField;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.BrowsableAttribute(true)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override System.Data.DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["songs"] != null)) {
                    base.Tables.Add(new songsDataTable(ds.Tables["songs"]));
                }
                if ((ds.Tables["artists"] != null)) {
                    base.Tables.Add(new artistsDataTable(ds.Tables["artists"]));
                }
                if ((ds.Tables["flags"] != null)) {
                    base.Tables.Add(new flagsDataTable(ds.Tables["flags"]));
                }
                if ((ds.Tables["ViewArtistNameForListBox"] != null)) {
                    base.Tables.Add(new ViewArtistNameForListBoxDataTable(ds.Tables["ViewArtistNameForListBox"]));
                }
                if ((ds.Tables["flaggedsongs"] != null)) {
                    base.Tables.Add(new flaggedsongsDataTable(ds.Tables["flaggedsongs"]));
                }
                if ((ds.Tables["ViewTOCArtist"] != null)) {
                    base.Tables.Add(new ViewTOCArtistDataTable(ds.Tables["ViewTOCArtist"]));
                }
                if ((ds.Tables["ViewTOCTitle"] != null)) {
                    base.Tables.Add(new ViewTOCTitleDataTable(ds.Tables["ViewTOCTitle"]));
                }
                if ((ds.Tables["ViewSongs"] != null)) {
                    base.Tables.Add(new ViewSongsDataTable(ds.Tables["ViewSongs"]));
                }
                if ((ds.Tables["ViewSongsSingleField"] != null)) {
                    base.Tables.Add(new ViewSongsSingleFieldDataTable(ds.Tables["ViewSongsSingleField"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tablesongs = ((songsDataTable)(base.Tables["songs"]));
            if ((initTable == true)) {
                if ((this.tablesongs != null)) {
                    this.tablesongs.InitVars();
                }
            }
            this.tableartists = ((artistsDataTable)(base.Tables["artists"]));
            if ((initTable == true)) {
                if ((this.tableartists != null)) {
                    this.tableartists.InitVars();
                }
            }
            this.tableflags = ((flagsDataTable)(base.Tables["flags"]));
            if ((initTable == true)) {
                if ((this.tableflags != null)) {
                    this.tableflags.InitVars();
                }
            }
            this.tableViewArtistNameForListBox = ((ViewArtistNameForListBoxDataTable)(base.Tables["ViewArtistNameForListBox"]));
            if ((initTable == true)) {
                if ((this.tableViewArtistNameForListBox != null)) {
                    this.tableViewArtistNameForListBox.InitVars();
                }
            }
            this.tableflaggedsongs = ((flaggedsongsDataTable)(base.Tables["flaggedsongs"]));
            if ((initTable == true)) {
                if ((this.tableflaggedsongs != null)) {
                    this.tableflaggedsongs.InitVars();
                }
            }
            this.tableViewTOCArtist = ((ViewTOCArtistDataTable)(base.Tables["ViewTOCArtist"]));
            if ((initTable == true)) {
                if ((this.tableViewTOCArtist != null)) {
                    this.tableViewTOCArtist.InitVars();
                }
            }
            this.tableViewTOCTitle = ((ViewTOCTitleDataTable)(base.Tables["ViewTOCTitle"]));
            if ((initTable == true)) {
                if ((this.tableViewTOCTitle != null)) {
                    this.tableViewTOCTitle.InitVars();
                }
            }
            this.tableViewSongs = ((ViewSongsDataTable)(base.Tables["ViewSongs"]));
            if ((initTable == true)) {
                if ((this.tableViewSongs != null)) {
                    this.tableViewSongs.InitVars();
                }
            }
            this.tableViewSongsSingleField = ((ViewSongsSingleFieldDataTable)(base.Tables["ViewSongsSingleField"]));
            if ((initTable == true)) {
                if ((this.tableViewSongsSingleField != null)) {
                    this.tableViewSongsSingleField.InitVars();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSet1.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = System.Data.SchemaSerializationMode.IncludeSchema;
            this.tablesongs = new songsDataTable();
            base.Tables.Add(this.tablesongs);
            this.tableartists = new artistsDataTable();
            base.Tables.Add(this.tableartists);
            this.tableflags = new flagsDataTable();
            base.Tables.Add(this.tableflags);
            this.tableViewArtistNameForListBox = new ViewArtistNameForListBoxDataTable();
            base.Tables.Add(this.tableViewArtistNameForListBox);
            this.tableflaggedsongs = new flaggedsongsDataTable();
            base.Tables.Add(this.tableflaggedsongs);
            this.tableViewTOCArtist = new ViewTOCArtistDataTable();
            base.Tables.Add(this.tableViewTOCArtist);
            this.tableViewTOCTitle = new ViewTOCTitleDataTable();
            base.Tables.Add(this.tableViewTOCTitle);
            this.tableViewSongs = new ViewSongsDataTable();
            base.Tables.Add(this.tableViewSongs);
            this.tableViewSongsSingleField = new ViewSongsSingleFieldDataTable();
            base.Tables.Add(this.tableViewSongsSingleField);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializesongs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeartists() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeflags() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewArtistNameForListBox() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeflaggedsongs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewTOCArtist() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewTOCTitle() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewSongs() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeViewSongsSingleField() {
            return false;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            DataSet1 ds = new DataSet1();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void songsRowChangeEventHandler(object sender, songsRowChangeEvent e);
        
        public delegate void artistsRowChangeEventHandler(object sender, artistsRowChangeEvent e);
        
        public delegate void flagsRowChangeEventHandler(object sender, flagsRowChangeEvent e);
        
        public delegate void ViewArtistNameForListBoxRowChangeEventHandler(object sender, ViewArtistNameForListBoxRowChangeEvent e);
        
        public delegate void flaggedsongsRowChangeEventHandler(object sender, flaggedsongsRowChangeEvent e);
        
        public delegate void ViewTOCArtistRowChangeEventHandler(object sender, ViewTOCArtistRowChangeEvent e);
        
        public delegate void ViewTOCTitleRowChangeEventHandler(object sender, ViewTOCTitleRowChangeEvent e);
        
        public delegate void ViewSongsRowChangeEventHandler(object sender, ViewSongsRowChangeEvent e);
        
        public delegate void ViewSongsSingleFieldRowChangeEventHandler(object sender, ViewSongsSingleFieldRowChangeEvent e);
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class songsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTitlePrefix;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnSongKey;
            
            private System.Data.DataColumn columnComment;
            
            private System.Data.DataColumn columnPageNumber;
            
            private System.Data.DataColumn columnCategory;
            
            private System.Data.DataColumn columnSongbookOnly;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnArtist;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsDataTable() {
                this.TableName = "songs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal songsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected songsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitlePrefixColumn {
                get {
                    return this.columnTitlePrefix;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongKeyColumn {
                get {
                    return this.columnSongKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageNumberColumn {
                get {
                    return this.columnPageNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongbookOnlyColumn {
                get {
                    return this.columnSongbookOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsRow this[int index] {
                get {
                    return ((songsRow)(this.Rows[index]));
                }
            }
            
            public event songsRowChangeEventHandler songsRowChanging;
            
            public event songsRowChangeEventHandler songsRowChanged;
            
            public event songsRowChangeEventHandler songsRowDeleting;
            
            public event songsRowChangeEventHandler songsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddsongsRow(songsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsRow AddsongsRow(string TitlePrefix, string Title, string Code, string SongKey, string Comment, int PageNumber, string Category, byte SongbookOnly, int Artist) {
                songsRow rowsongsRow = ((songsRow)(this.NewRow()));
                rowsongsRow.ItemArray = new object[] {
                        TitlePrefix,
                        Title,
                        Code,
                        SongKey,
                        Comment,
                        PageNumber,
                        Category,
                        SongbookOnly,
                        null,
                        Artist};
                this.Rows.Add(rowsongsRow);
                return rowsongsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsRow FindByID(int ID) {
                return ((songsRow)(this.Rows.Find(new object[] {
                            ID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                songsDataTable cln = ((songsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new songsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitlePrefix = base.Columns["TitlePrefix"];
                this.columnTitle = base.Columns["Title"];
                this.columnCode = base.Columns["Code"];
                this.columnSongKey = base.Columns["SongKey"];
                this.columnComment = base.Columns["Comment"];
                this.columnPageNumber = base.Columns["PageNumber"];
                this.columnCategory = base.Columns["Category"];
                this.columnSongbookOnly = base.Columns["SongbookOnly"];
                this.columnID = base.Columns["ID"];
                this.columnArtist = base.Columns["Artist"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitlePrefix = new System.Data.DataColumn("TitlePrefix", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitlePrefix);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnCode = new System.Data.DataColumn("Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnSongKey = new System.Data.DataColumn("SongKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSongKey);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnPageNumber = new System.Data.DataColumn("PageNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageNumber);
                this.columnCategory = new System.Data.DataColumn("Category", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnSongbookOnly = new System.Data.DataColumn("SongbookOnly", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSongbookOnly);
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnArtist = new System.Data.DataColumn("Artist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtist);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnID}, true));
                this.columnTitlePrefix.MaxLength = 8000;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 8000;
                this.columnCode.MaxLength = 8000;
                this.columnSongKey.MaxLength = 8000;
                this.columnComment.MaxLength = 8000;
                this.columnCategory.MaxLength = 8000;
                this.columnID.AutoIncrement = true;
                this.columnID.AllowDBNull = false;
                this.columnID.ReadOnly = true;
                this.columnID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsRow NewsongsRow() {
                return ((songsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new songsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(songsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.songsRowChanged != null)) {
                    this.songsRowChanged(this, new songsRowChangeEvent(((songsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.songsRowChanging != null)) {
                    this.songsRowChanging(this, new songsRowChangeEvent(((songsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.songsRowDeleted != null)) {
                    this.songsRowDeleted(this, new songsRowChangeEvent(((songsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.songsRowDeleting != null)) {
                    this.songsRowDeleting(this, new songsRowChangeEvent(((songsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemovesongsRow(songsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "songsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class artistsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnArtistFirstName;
            
            private System.Data.DataColumn columnArtistLastName;
            
            private System.Data.DataColumn columnArtistID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsDataTable() {
                this.TableName = "artists";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal artistsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected artistsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistFirstNameColumn {
                get {
                    return this.columnArtistFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistLastNameColumn {
                get {
                    return this.columnArtistLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistIDColumn {
                get {
                    return this.columnArtistID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsRow this[int index] {
                get {
                    return ((artistsRow)(this.Rows[index]));
                }
            }
            
            public event artistsRowChangeEventHandler artistsRowChanging;
            
            public event artistsRowChangeEventHandler artistsRowChanged;
            
            public event artistsRowChangeEventHandler artistsRowDeleting;
            
            public event artistsRowChangeEventHandler artistsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddartistsRow(artistsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsRow AddartistsRow(string ArtistFirstName, string ArtistLastName) {
                artistsRow rowartistsRow = ((artistsRow)(this.NewRow()));
                rowartistsRow.ItemArray = new object[] {
                        ArtistFirstName,
                        ArtistLastName,
                        null};
                this.Rows.Add(rowartistsRow);
                return rowartistsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsRow FindByArtistID(int ArtistID) {
                return ((artistsRow)(this.Rows.Find(new object[] {
                            ArtistID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                artistsDataTable cln = ((artistsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new artistsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnArtistFirstName = base.Columns["ArtistFirstName"];
                this.columnArtistLastName = base.Columns["ArtistLastName"];
                this.columnArtistID = base.Columns["ArtistID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnArtistFirstName = new System.Data.DataColumn("ArtistFirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistFirstName);
                this.columnArtistLastName = new System.Data.DataColumn("ArtistLastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistLastName);
                this.columnArtistID = new System.Data.DataColumn("ArtistID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnArtistID}, true));
                this.columnArtistFirstName.MaxLength = 8000;
                this.columnArtistLastName.MaxLength = 8000;
                this.columnArtistID.AutoIncrement = true;
                this.columnArtistID.AllowDBNull = false;
                this.columnArtistID.ReadOnly = true;
                this.columnArtistID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsRow NewartistsRow() {
                return ((artistsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new artistsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(artistsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.artistsRowChanged != null)) {
                    this.artistsRowChanged(this, new artistsRowChangeEvent(((artistsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.artistsRowChanging != null)) {
                    this.artistsRowChanging(this, new artistsRowChangeEvent(((artistsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.artistsRowDeleted != null)) {
                    this.artistsRowDeleted(this, new artistsRowChangeEvent(((artistsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.artistsRowDeleting != null)) {
                    this.artistsRowDeleting(this, new artistsRowChangeEvent(((artistsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveartistsRow(artistsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "artistsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class flagsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnFlagID;
            
            private System.Data.DataColumn columnFlagName;
            
            private System.Data.DataColumn columnFlagDescription;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsDataTable() {
                this.TableName = "flags";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal flagsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected flagsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlagIDColumn {
                get {
                    return this.columnFlagID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlagNameColumn {
                get {
                    return this.columnFlagName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlagDescriptionColumn {
                get {
                    return this.columnFlagDescription;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsRow this[int index] {
                get {
                    return ((flagsRow)(this.Rows[index]));
                }
            }
            
            public event flagsRowChangeEventHandler flagsRowChanging;
            
            public event flagsRowChangeEventHandler flagsRowChanged;
            
            public event flagsRowChangeEventHandler flagsRowDeleting;
            
            public event flagsRowChangeEventHandler flagsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddflagsRow(flagsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsRow AddflagsRow(string FlagName, string FlagDescription) {
                flagsRow rowflagsRow = ((flagsRow)(this.NewRow()));
                rowflagsRow.ItemArray = new object[] {
                        null,
                        FlagName,
                        FlagDescription};
                this.Rows.Add(rowflagsRow);
                return rowflagsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsRow FindByFlagID(int FlagID) {
                return ((flagsRow)(this.Rows.Find(new object[] {
                            FlagID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                flagsDataTable cln = ((flagsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new flagsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFlagID = base.Columns["FlagID"];
                this.columnFlagName = base.Columns["FlagName"];
                this.columnFlagDescription = base.Columns["FlagDescription"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFlagID = new System.Data.DataColumn("FlagID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagID);
                this.columnFlagName = new System.Data.DataColumn("FlagName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagName);
                this.columnFlagDescription = new System.Data.DataColumn("FlagDescription", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagDescription);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFlagID}, true));
                this.columnFlagID.AutoIncrement = true;
                this.columnFlagID.AllowDBNull = false;
                this.columnFlagID.ReadOnly = true;
                this.columnFlagID.Unique = true;
                this.columnFlagName.MaxLength = 8000;
                this.columnFlagDescription.MaxLength = 250;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsRow NewflagsRow() {
                return ((flagsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new flagsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(flagsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.flagsRowChanged != null)) {
                    this.flagsRowChanged(this, new flagsRowChangeEvent(((flagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.flagsRowChanging != null)) {
                    this.flagsRowChanging(this, new flagsRowChangeEvent(((flagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.flagsRowDeleted != null)) {
                    this.flagsRowDeleted(this, new flagsRowChangeEvent(((flagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.flagsRowDeleting != null)) {
                    this.flagsRowDeleting(this, new flagsRowChangeEvent(((flagsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveflagsRow(flagsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "flagsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewArtistNameForListBoxDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnName;
            
            private System.Data.DataColumn columnArtistLastName;
            
            private System.Data.DataColumn columnArtist;
            
            private System.Data.DataColumn columnArtistFirstName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxDataTable() {
                this.TableName = "ViewArtistNameForListBox";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewArtistNameForListBoxDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewArtistNameForListBoxDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistLastNameColumn {
                get {
                    return this.columnArtistLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistFirstNameColumn {
                get {
                    return this.columnArtistFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxRow this[int index] {
                get {
                    return ((ViewArtistNameForListBoxRow)(this.Rows[index]));
                }
            }
            
            public event ViewArtistNameForListBoxRowChangeEventHandler ViewArtistNameForListBoxRowChanging;
            
            public event ViewArtistNameForListBoxRowChangeEventHandler ViewArtistNameForListBoxRowChanged;
            
            public event ViewArtistNameForListBoxRowChangeEventHandler ViewArtistNameForListBoxRowDeleting;
            
            public event ViewArtistNameForListBoxRowChangeEventHandler ViewArtistNameForListBoxRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewArtistNameForListBoxRow(ViewArtistNameForListBoxRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxRow AddViewArtistNameForListBoxRow(string Name, string ArtistLastName, string ArtistFirstName) {
                ViewArtistNameForListBoxRow rowViewArtistNameForListBoxRow = ((ViewArtistNameForListBoxRow)(this.NewRow()));
                rowViewArtistNameForListBoxRow.ItemArray = new object[] {
                        Name,
                        ArtistLastName,
                        null,
                        ArtistFirstName};
                this.Rows.Add(rowViewArtistNameForListBoxRow);
                return rowViewArtistNameForListBoxRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxRow FindByArtist(int Artist) {
                return ((ViewArtistNameForListBoxRow)(this.Rows.Find(new object[] {
                            Artist})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewArtistNameForListBoxDataTable cln = ((ViewArtistNameForListBoxDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewArtistNameForListBoxDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnName = base.Columns["Name"];
                this.columnArtistLastName = base.Columns["ArtistLastName"];
                this.columnArtist = base.Columns["Artist"];
                this.columnArtistFirstName = base.Columns["ArtistFirstName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnName = new System.Data.DataColumn("Name", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnArtistLastName = new System.Data.DataColumn("ArtistLastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistLastName);
                this.columnArtist = new System.Data.DataColumn("Artist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtist);
                this.columnArtistFirstName = new System.Data.DataColumn("ArtistFirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistFirstName);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnArtist}, true));
                this.columnName.ReadOnly = true;
                this.columnName.MaxLength = 8000;
                this.columnArtistLastName.MaxLength = 8000;
                this.columnArtist.AutoIncrement = true;
                this.columnArtist.AllowDBNull = false;
                this.columnArtist.ReadOnly = true;
                this.columnArtist.Unique = true;
                this.columnArtistFirstName.MaxLength = 8000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxRow NewViewArtistNameForListBoxRow() {
                return ((ViewArtistNameForListBoxRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewArtistNameForListBoxRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewArtistNameForListBoxRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewArtistNameForListBoxRowChanged != null)) {
                    this.ViewArtistNameForListBoxRowChanged(this, new ViewArtistNameForListBoxRowChangeEvent(((ViewArtistNameForListBoxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewArtistNameForListBoxRowChanging != null)) {
                    this.ViewArtistNameForListBoxRowChanging(this, new ViewArtistNameForListBoxRowChangeEvent(((ViewArtistNameForListBoxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewArtistNameForListBoxRowDeleted != null)) {
                    this.ViewArtistNameForListBoxRowDeleted(this, new ViewArtistNameForListBoxRowChangeEvent(((ViewArtistNameForListBoxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewArtistNameForListBoxRowDeleting != null)) {
                    this.ViewArtistNameForListBoxRowDeleting(this, new ViewArtistNameForListBoxRowChangeEvent(((ViewArtistNameForListBoxRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewArtistNameForListBoxRow(ViewArtistNameForListBoxRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewArtistNameForListBoxDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class flaggedsongsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSong;
            
            private System.Data.DataColumn columnFlaggedSongID;
            
            private System.Data.DataColumn columnFlagID;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsDataTable() {
                this.TableName = "flaggedsongs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal flaggedsongsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected flaggedsongsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongColumn {
                get {
                    return this.columnSong;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlaggedSongIDColumn {
                get {
                    return this.columnFlaggedSongID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FlagIDColumn {
                get {
                    return this.columnFlagID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsRow this[int index] {
                get {
                    return ((flaggedsongsRow)(this.Rows[index]));
                }
            }
            
            public event flaggedsongsRowChangeEventHandler flaggedsongsRowChanging;
            
            public event flaggedsongsRowChangeEventHandler flaggedsongsRowChanged;
            
            public event flaggedsongsRowChangeEventHandler flaggedsongsRowDeleting;
            
            public event flaggedsongsRowChangeEventHandler flaggedsongsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddflaggedsongsRow(flaggedsongsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsRow AddflaggedsongsRow(int Song, int FlagID) {
                flaggedsongsRow rowflaggedsongsRow = ((flaggedsongsRow)(this.NewRow()));
                rowflaggedsongsRow.ItemArray = new object[] {
                        Song,
                        null,
                        FlagID};
                this.Rows.Add(rowflaggedsongsRow);
                return rowflaggedsongsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsRow FindByFlaggedSongID(int FlaggedSongID) {
                return ((flaggedsongsRow)(this.Rows.Find(new object[] {
                            FlaggedSongID})));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                flaggedsongsDataTable cln = ((flaggedsongsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new flaggedsongsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSong = base.Columns["Song"];
                this.columnFlaggedSongID = base.Columns["FlaggedSongID"];
                this.columnFlagID = base.Columns["FlagID"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSong = new System.Data.DataColumn("Song", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSong);
                this.columnFlaggedSongID = new System.Data.DataColumn("FlaggedSongID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlaggedSongID);
                this.columnFlagID = new System.Data.DataColumn("FlagID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlagID);
                this.Constraints.Add(new System.Data.UniqueConstraint("Constraint1", new System.Data.DataColumn[] {
                                this.columnFlaggedSongID}, true));
                this.columnFlaggedSongID.AutoIncrement = true;
                this.columnFlaggedSongID.AllowDBNull = false;
                this.columnFlaggedSongID.ReadOnly = true;
                this.columnFlaggedSongID.Unique = true;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsRow NewflaggedsongsRow() {
                return ((flaggedsongsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new flaggedsongsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(flaggedsongsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.flaggedsongsRowChanged != null)) {
                    this.flaggedsongsRowChanged(this, new flaggedsongsRowChangeEvent(((flaggedsongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.flaggedsongsRowChanging != null)) {
                    this.flaggedsongsRowChanging(this, new flaggedsongsRowChangeEvent(((flaggedsongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.flaggedsongsRowDeleted != null)) {
                    this.flaggedsongsRowDeleted(this, new flaggedsongsRowChangeEvent(((flaggedsongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.flaggedsongsRowDeleting != null)) {
                    this.flaggedsongsRowDeleting(this, new flaggedsongsRowChangeEvent(((flaggedsongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveflaggedsongsRow(flaggedsongsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "flaggedsongsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewTOCArtistDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnArtistAndTitle;
            
            private System.Data.DataColumn columnFullTitle;
            
            private System.Data.DataColumn columnFullArtistName;
            
            private System.Data.DataColumn columnPageNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCArtistDataTable() {
                this.TableName = "ViewTOCArtist";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewTOCArtistDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewTOCArtistDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistAndTitleColumn {
                get {
                    return this.columnArtistAndTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullTitleColumn {
                get {
                    return this.columnFullTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullArtistNameColumn {
                get {
                    return this.columnFullArtistName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageNumberColumn {
                get {
                    return this.columnPageNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCArtistRow this[int index] {
                get {
                    return ((ViewTOCArtistRow)(this.Rows[index]));
                }
            }
            
            public event ViewTOCArtistRowChangeEventHandler ViewTOCArtistRowChanging;
            
            public event ViewTOCArtistRowChangeEventHandler ViewTOCArtistRowChanged;
            
            public event ViewTOCArtistRowChangeEventHandler ViewTOCArtistRowDeleting;
            
            public event ViewTOCArtistRowChangeEventHandler ViewTOCArtistRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewTOCArtistRow(ViewTOCArtistRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCArtistRow AddViewTOCArtistRow(string ArtistAndTitle, string FullTitle, string FullArtistName, int PageNumber) {
                ViewTOCArtistRow rowViewTOCArtistRow = ((ViewTOCArtistRow)(this.NewRow()));
                rowViewTOCArtistRow.ItemArray = new object[] {
                        ArtistAndTitle,
                        FullTitle,
                        FullArtistName,
                        PageNumber};
                this.Rows.Add(rowViewTOCArtistRow);
                return rowViewTOCArtistRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewTOCArtistDataTable cln = ((ViewTOCArtistDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewTOCArtistDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnArtistAndTitle = base.Columns["ArtistAndTitle"];
                this.columnFullTitle = base.Columns["FullTitle"];
                this.columnFullArtistName = base.Columns["FullArtistName"];
                this.columnPageNumber = base.Columns["PageNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnArtistAndTitle = new System.Data.DataColumn("ArtistAndTitle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistAndTitle);
                this.columnFullTitle = new System.Data.DataColumn("FullTitle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullTitle);
                this.columnFullArtistName = new System.Data.DataColumn("FullArtistName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullArtistName);
                this.columnPageNumber = new System.Data.DataColumn("PageNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageNumber);
                this.columnArtistAndTitle.MaxLength = 8000;
                this.columnFullTitle.AllowDBNull = false;
                this.columnFullTitle.MaxLength = 8000;
                this.columnFullArtistName.MaxLength = 8000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCArtistRow NewViewTOCArtistRow() {
                return ((ViewTOCArtistRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewTOCArtistRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewTOCArtistRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewTOCArtistRowChanged != null)) {
                    this.ViewTOCArtistRowChanged(this, new ViewTOCArtistRowChangeEvent(((ViewTOCArtistRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewTOCArtistRowChanging != null)) {
                    this.ViewTOCArtistRowChanging(this, new ViewTOCArtistRowChangeEvent(((ViewTOCArtistRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewTOCArtistRowDeleted != null)) {
                    this.ViewTOCArtistRowDeleted(this, new ViewTOCArtistRowChangeEvent(((ViewTOCArtistRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewTOCArtistRowDeleting != null)) {
                    this.ViewTOCArtistRowDeleting(this, new ViewTOCArtistRowChangeEvent(((ViewTOCArtistRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewTOCArtistRow(ViewTOCArtistRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewTOCArtistDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewTOCTitleDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTitleAndArtist;
            
            private System.Data.DataColumn columnPageNumber;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCTitleDataTable() {
                this.TableName = "ViewTOCTitle";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewTOCTitleDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewTOCTitleDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleAndArtistColumn {
                get {
                    return this.columnTitleAndArtist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageNumberColumn {
                get {
                    return this.columnPageNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCTitleRow this[int index] {
                get {
                    return ((ViewTOCTitleRow)(this.Rows[index]));
                }
            }
            
            public event ViewTOCTitleRowChangeEventHandler ViewTOCTitleRowChanging;
            
            public event ViewTOCTitleRowChangeEventHandler ViewTOCTitleRowChanged;
            
            public event ViewTOCTitleRowChangeEventHandler ViewTOCTitleRowDeleting;
            
            public event ViewTOCTitleRowChangeEventHandler ViewTOCTitleRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewTOCTitleRow(ViewTOCTitleRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCTitleRow AddViewTOCTitleRow(string TitleAndArtist, int PageNumber) {
                ViewTOCTitleRow rowViewTOCTitleRow = ((ViewTOCTitleRow)(this.NewRow()));
                rowViewTOCTitleRow.ItemArray = new object[] {
                        TitleAndArtist,
                        PageNumber};
                this.Rows.Add(rowViewTOCTitleRow);
                return rowViewTOCTitleRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewTOCTitleDataTable cln = ((ViewTOCTitleDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewTOCTitleDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitleAndArtist = base.Columns["TitleAndArtist"];
                this.columnPageNumber = base.Columns["PageNumber"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitleAndArtist = new System.Data.DataColumn("TitleAndArtist", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitleAndArtist);
                this.columnPageNumber = new System.Data.DataColumn("PageNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageNumber);
                this.columnTitleAndArtist.AllowDBNull = false;
                this.columnTitleAndArtist.MaxLength = 8000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCTitleRow NewViewTOCTitleRow() {
                return ((ViewTOCTitleRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewTOCTitleRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewTOCTitleRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewTOCTitleRowChanged != null)) {
                    this.ViewTOCTitleRowChanged(this, new ViewTOCTitleRowChangeEvent(((ViewTOCTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewTOCTitleRowChanging != null)) {
                    this.ViewTOCTitleRowChanging(this, new ViewTOCTitleRowChangeEvent(((ViewTOCTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewTOCTitleRowDeleted != null)) {
                    this.ViewTOCTitleRowDeleted(this, new ViewTOCTitleRowChangeEvent(((ViewTOCTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewTOCTitleRowDeleting != null)) {
                    this.ViewTOCTitleRowDeleting(this, new ViewTOCTitleRowChangeEvent(((ViewTOCTitleRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewTOCTitleRow(ViewTOCTitleRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewTOCTitleDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewSongsDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnTitlePrefix;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnCode;
            
            private System.Data.DataColumn columnSongKey;
            
            private System.Data.DataColumn columnComment;
            
            private System.Data.DataColumn columnPageNumber;
            
            private System.Data.DataColumn columnCategory;
            
            private System.Data.DataColumn columnSongbookOnly;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnArtist;
            
            private System.Data.DataColumn columnArtistFirstName;
            
            private System.Data.DataColumn columnArtistLastName;
            
            private System.Data.DataColumn columnFullTitle;
            
            private System.Data.DataColumn columnFullArtistName;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsDataTable() {
                this.TableName = "ViewSongs";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewSongsDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewSongsDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitlePrefixColumn {
                get {
                    return this.columnTitlePrefix;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongKeyColumn {
                get {
                    return this.columnSongKey;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CommentColumn {
                get {
                    return this.columnComment;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn PageNumberColumn {
                get {
                    return this.columnPageNumber;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CategoryColumn {
                get {
                    return this.columnCategory;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongbookOnlyColumn {
                get {
                    return this.columnSongbookOnly;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistColumn {
                get {
                    return this.columnArtist;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistFirstNameColumn {
                get {
                    return this.columnArtistFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistLastNameColumn {
                get {
                    return this.columnArtistLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullTitleColumn {
                get {
                    return this.columnFullTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn FullArtistNameColumn {
                get {
                    return this.columnFullArtistName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsRow this[int index] {
                get {
                    return ((ViewSongsRow)(this.Rows[index]));
                }
            }
            
            public event ViewSongsRowChangeEventHandler ViewSongsRowChanging;
            
            public event ViewSongsRowChangeEventHandler ViewSongsRowChanged;
            
            public event ViewSongsRowChangeEventHandler ViewSongsRowDeleting;
            
            public event ViewSongsRowChangeEventHandler ViewSongsRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewSongsRow(ViewSongsRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsRow AddViewSongsRow(string TitlePrefix, string Title, string Code, string SongKey, string Comment, int PageNumber, string Category, byte SongbookOnly, int ID, int Artist, string ArtistFirstName, string ArtistLastName, string FullTitle, string FullArtistName) {
                ViewSongsRow rowViewSongsRow = ((ViewSongsRow)(this.NewRow()));
                rowViewSongsRow.ItemArray = new object[] {
                        TitlePrefix,
                        Title,
                        Code,
                        SongKey,
                        Comment,
                        PageNumber,
                        Category,
                        SongbookOnly,
                        ID,
                        Artist,
                        ArtistFirstName,
                        ArtistLastName,
                        FullTitle,
                        FullArtistName};
                this.Rows.Add(rowViewSongsRow);
                return rowViewSongsRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewSongsDataTable cln = ((ViewSongsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewSongsDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnTitlePrefix = base.Columns["TitlePrefix"];
                this.columnTitle = base.Columns["Title"];
                this.columnCode = base.Columns["Code"];
                this.columnSongKey = base.Columns["SongKey"];
                this.columnComment = base.Columns["Comment"];
                this.columnPageNumber = base.Columns["PageNumber"];
                this.columnCategory = base.Columns["Category"];
                this.columnSongbookOnly = base.Columns["SongbookOnly"];
                this.columnID = base.Columns["ID"];
                this.columnArtist = base.Columns["Artist"];
                this.columnArtistFirstName = base.Columns["ArtistFirstName"];
                this.columnArtistLastName = base.Columns["ArtistLastName"];
                this.columnFullTitle = base.Columns["FullTitle"];
                this.columnFullArtistName = base.Columns["FullArtistName"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnTitlePrefix = new System.Data.DataColumn("TitlePrefix", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitlePrefix);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnCode = new System.Data.DataColumn("Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnSongKey = new System.Data.DataColumn("SongKey", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSongKey);
                this.columnComment = new System.Data.DataColumn("Comment", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnComment);
                this.columnPageNumber = new System.Data.DataColumn("PageNumber", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPageNumber);
                this.columnCategory = new System.Data.DataColumn("Category", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCategory);
                this.columnSongbookOnly = new System.Data.DataColumn("SongbookOnly", typeof(byte), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSongbookOnly);
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnArtist = new System.Data.DataColumn("Artist", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtist);
                this.columnArtistFirstName = new System.Data.DataColumn("ArtistFirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistFirstName);
                this.columnArtistLastName = new System.Data.DataColumn("ArtistLastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistLastName);
                this.columnFullTitle = new System.Data.DataColumn("FullTitle", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullTitle);
                this.columnFullArtistName = new System.Data.DataColumn("FullArtistName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnFullArtistName);
                this.columnTitlePrefix.MaxLength = 8000;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 8000;
                this.columnCode.MaxLength = 8000;
                this.columnSongKey.MaxLength = 8000;
                this.columnComment.MaxLength = 8000;
                this.columnCategory.MaxLength = 8000;
                this.columnID.AllowDBNull = false;
                this.columnArtistFirstName.MaxLength = 8000;
                this.columnArtistLastName.MaxLength = 8000;
                this.columnFullTitle.AllowDBNull = false;
                this.columnFullTitle.MaxLength = 8000;
                this.columnFullArtistName.MaxLength = 8000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsRow NewViewSongsRow() {
                return ((ViewSongsRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewSongsRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewSongsRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewSongsRowChanged != null)) {
                    this.ViewSongsRowChanged(this, new ViewSongsRowChangeEvent(((ViewSongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewSongsRowChanging != null)) {
                    this.ViewSongsRowChanging(this, new ViewSongsRowChangeEvent(((ViewSongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewSongsRowDeleted != null)) {
                    this.ViewSongsRowDeleted(this, new ViewSongsRowChangeEvent(((ViewSongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewSongsRowDeleting != null)) {
                    this.ViewSongsRowDeleting(this, new ViewSongsRowChangeEvent(((ViewSongsRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewSongsRow(ViewSongsRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewSongsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ViewSongsSingleFieldDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnSongFull;
            
            private System.Data.DataColumn columnSongFullArtistFirst;
            
            private System.Data.DataColumn columnArtistFirstName;
            
            private System.Data.DataColumn columnArtistLastName;
            
            private System.Data.DataColumn columnTitle;
            
            private System.Data.DataColumn columnTitlePrefix;
            
            private System.Data.DataColumn columnID;
            
            private System.Data.DataColumn columnCode;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsSingleFieldDataTable() {
                this.TableName = "ViewSongsSingleField";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewSongsSingleFieldDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ViewSongsSingleFieldDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongFullColumn {
                get {
                    return this.columnSongFull;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn SongFullArtistFirstColumn {
                get {
                    return this.columnSongFullArtistFirst;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistFirstNameColumn {
                get {
                    return this.columnArtistFirstName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn ArtistLastNameColumn {
                get {
                    return this.columnArtistLastName;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn TitlePrefixColumn {
                get {
                    return this.columnTitlePrefix;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataColumn CodeColumn {
                get {
                    return this.columnCode;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsSingleFieldRow this[int index] {
                get {
                    return ((ViewSongsSingleFieldRow)(this.Rows[index]));
                }
            }
            
            public event ViewSongsSingleFieldRowChangeEventHandler ViewSongsSingleFieldRowChanging;
            
            public event ViewSongsSingleFieldRowChangeEventHandler ViewSongsSingleFieldRowChanged;
            
            public event ViewSongsSingleFieldRowChangeEventHandler ViewSongsSingleFieldRowDeleting;
            
            public event ViewSongsSingleFieldRowChangeEventHandler ViewSongsSingleFieldRowDeleted;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddViewSongsSingleFieldRow(ViewSongsSingleFieldRow row) {
                this.Rows.Add(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsSingleFieldRow AddViewSongsSingleFieldRow(string SongFull, string SongFullArtistFirst, string ArtistFirstName, string ArtistLastName, string Title, string TitlePrefix, int ID, string Code) {
                ViewSongsSingleFieldRow rowViewSongsSingleFieldRow = ((ViewSongsSingleFieldRow)(this.NewRow()));
                rowViewSongsSingleFieldRow.ItemArray = new object[] {
                        SongFull,
                        SongFullArtistFirst,
                        ArtistFirstName,
                        ArtistLastName,
                        Title,
                        TitlePrefix,
                        ID,
                        Code};
                this.Rows.Add(rowViewSongsSingleFieldRow);
                return rowViewSongsSingleFieldRow;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override System.Data.DataTable Clone() {
                ViewSongsSingleFieldDataTable cln = ((ViewSongsSingleFieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataTable CreateInstance() {
                return new ViewSongsSingleFieldDataTable();
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSongFull = base.Columns["SongFull"];
                this.columnSongFullArtistFirst = base.Columns["SongFullArtistFirst"];
                this.columnArtistFirstName = base.Columns["ArtistFirstName"];
                this.columnArtistLastName = base.Columns["ArtistLastName"];
                this.columnTitle = base.Columns["Title"];
                this.columnTitlePrefix = base.Columns["TitlePrefix"];
                this.columnID = base.Columns["ID"];
                this.columnCode = base.Columns["Code"];
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSongFull = new System.Data.DataColumn("SongFull", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSongFull);
                this.columnSongFullArtistFirst = new System.Data.DataColumn("SongFullArtistFirst", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnSongFullArtistFirst);
                this.columnArtistFirstName = new System.Data.DataColumn("ArtistFirstName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistFirstName);
                this.columnArtistLastName = new System.Data.DataColumn("ArtistLastName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnArtistLastName);
                this.columnTitle = new System.Data.DataColumn("Title", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnTitlePrefix = new System.Data.DataColumn("TitlePrefix", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitlePrefix);
                this.columnID = new System.Data.DataColumn("ID", typeof(int), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnCode = new System.Data.DataColumn("Code", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnCode);
                this.columnSongFull.AllowDBNull = false;
                this.columnSongFull.MaxLength = 8000;
                this.columnSongFullArtistFirst.AllowDBNull = false;
                this.columnSongFullArtistFirst.MaxLength = 8000;
                this.columnArtistFirstName.MaxLength = 8000;
                this.columnArtistLastName.MaxLength = 8000;
                this.columnTitle.AllowDBNull = false;
                this.columnTitle.MaxLength = 8000;
                this.columnTitlePrefix.MaxLength = 8000;
                this.columnID.AllowDBNull = false;
                this.columnCode.MaxLength = 8000;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsSingleFieldRow NewViewSongsSingleFieldRow() {
                return ((ViewSongsSingleFieldRow)(this.NewRow()));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new ViewSongsSingleFieldRow(builder);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override System.Type GetRowType() {
                return typeof(ViewSongsSingleFieldRow);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ViewSongsSingleFieldRowChanged != null)) {
                    this.ViewSongsSingleFieldRowChanged(this, new ViewSongsSingleFieldRowChangeEvent(((ViewSongsSingleFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ViewSongsSingleFieldRowChanging != null)) {
                    this.ViewSongsSingleFieldRowChanging(this, new ViewSongsSingleFieldRowChangeEvent(((ViewSongsSingleFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ViewSongsSingleFieldRowDeleted != null)) {
                    this.ViewSongsSingleFieldRowDeleted(this, new ViewSongsSingleFieldRowChangeEvent(((ViewSongsSingleFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ViewSongsSingleFieldRowDeleting != null)) {
                    this.ViewSongsSingleFieldRowDeleting(this, new ViewSongsSingleFieldRowChangeEvent(((ViewSongsSingleFieldRow)(e.Row)), e.Action));
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveViewSongsSingleFieldRow(ViewSongsSingleFieldRow row) {
                this.Rows.Remove(row);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                DataSet1 ds = new DataSet1();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ViewSongsSingleFieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class songsRow : System.Data.DataRow {
            
            private songsDataTable tablesongs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal songsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tablesongs = ((songsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitlePrefix {
                get {
                    try {
                        return ((string)(this[this.tablesongs.TitlePrefixColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TitlePrefix\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.TitlePrefixColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tablesongs.TitleColumn]));
                }
                set {
                    this[this.tablesongs.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tablesongs.CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Code\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SongKey {
                get {
                    try {
                        return ((string)(this[this.tablesongs.SongKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SongKey\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.SongKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tablesongs.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageNumber {
                get {
                    try {
                        return ((int)(this[this.tablesongs.PageNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageNumber\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.PageNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tablesongs.CategoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Category\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.CategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SongbookOnly {
                get {
                    try {
                        return ((byte)(this[this.tablesongs.SongbookOnlyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SongbookOnly\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.SongbookOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tablesongs.IDColumn]));
                }
                set {
                    this[this.tablesongs.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Artist {
                get {
                    try {
                        return ((int)(this[this.tablesongs.ArtistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Artist\' in table \'songs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tablesongs.ArtistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitlePrefixNull() {
                return this.IsNull(this.tablesongs.TitlePrefixColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitlePrefixNull() {
                this[this.tablesongs.TitlePrefixColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tablesongs.CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tablesongs.CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSongKeyNull() {
                return this.IsNull(this.tablesongs.SongKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSongKeyNull() {
                this[this.tablesongs.SongKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tablesongs.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tablesongs.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageNumberNull() {
                return this.IsNull(this.tablesongs.PageNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageNumberNull() {
                this[this.tablesongs.PageNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tablesongs.CategoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tablesongs.CategoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSongbookOnlyNull() {
                return this.IsNull(this.tablesongs.SongbookOnlyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSongbookOnlyNull() {
                this[this.tablesongs.SongbookOnlyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistNull() {
                return this.IsNull(this.tablesongs.ArtistColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistNull() {
                this[this.tablesongs.ArtistColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class artistsRow : System.Data.DataRow {
            
            private artistsDataTable tableartists;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal artistsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableartists = ((artistsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistFirstName {
                get {
                    try {
                        return ((string)(this[this.tableartists.ArtistFirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistFirstName\' in table \'artists\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableartists.ArtistFirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistLastName {
                get {
                    try {
                        return ((string)(this[this.tableartists.ArtistLastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistLastName\' in table \'artists\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableartists.ArtistLastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ArtistID {
                get {
                    return ((int)(this[this.tableartists.ArtistIDColumn]));
                }
                set {
                    this[this.tableartists.ArtistIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistFirstNameNull() {
                return this.IsNull(this.tableartists.ArtistFirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistFirstNameNull() {
                this[this.tableartists.ArtistFirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistLastNameNull() {
                return this.IsNull(this.tableartists.ArtistLastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistLastNameNull() {
                this[this.tableartists.ArtistLastNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class flagsRow : System.Data.DataRow {
            
            private flagsDataTable tableflags;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal flagsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableflags = ((flagsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlagID {
                get {
                    return ((int)(this[this.tableflags.FlagIDColumn]));
                }
                set {
                    this[this.tableflags.FlagIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlagName {
                get {
                    try {
                        return ((string)(this[this.tableflags.FlagNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FlagName\' in table \'flags\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableflags.FlagNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FlagDescription {
                get {
                    try {
                        return ((string)(this[this.tableflags.FlagDescriptionColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FlagDescription\' in table \'flags\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableflags.FlagDescriptionColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagNameNull() {
                return this.IsNull(this.tableflags.FlagNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagNameNull() {
                this[this.tableflags.FlagNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagDescriptionNull() {
                return this.IsNull(this.tableflags.FlagDescriptionColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagDescriptionNull() {
                this[this.tableflags.FlagDescriptionColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewArtistNameForListBoxRow : System.Data.DataRow {
            
            private ViewArtistNameForListBoxDataTable tableViewArtistNameForListBox;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewArtistNameForListBoxRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewArtistNameForListBox = ((ViewArtistNameForListBoxDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    try {
                        return ((string)(this[this.tableViewArtistNameForListBox.NameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Name\' in table \'ViewArtistNameForListBox\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewArtistNameForListBox.NameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistLastName {
                get {
                    try {
                        return ((string)(this[this.tableViewArtistNameForListBox.ArtistLastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistLastName\' in table \'ViewArtistNameForListBox\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableViewArtistNameForListBox.ArtistLastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Artist {
                get {
                    return ((int)(this[this.tableViewArtistNameForListBox.ArtistColumn]));
                }
                set {
                    this[this.tableViewArtistNameForListBox.ArtistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistFirstName {
                get {
                    try {
                        return ((string)(this[this.tableViewArtistNameForListBox.ArtistFirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistFirstName\' in table \'ViewArtistNameForListBox\' is DBN" +
                                "ull.", e);
                    }
                }
                set {
                    this[this.tableViewArtistNameForListBox.ArtistFirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNameNull() {
                return this.IsNull(this.tableViewArtistNameForListBox.NameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNameNull() {
                this[this.tableViewArtistNameForListBox.NameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistLastNameNull() {
                return this.IsNull(this.tableViewArtistNameForListBox.ArtistLastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistLastNameNull() {
                this[this.tableViewArtistNameForListBox.ArtistLastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistFirstNameNull() {
                return this.IsNull(this.tableViewArtistNameForListBox.ArtistFirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistFirstNameNull() {
                this[this.tableViewArtistNameForListBox.ArtistFirstNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class flaggedsongsRow : System.Data.DataRow {
            
            private flaggedsongsDataTable tableflaggedsongs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal flaggedsongsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableflaggedsongs = ((flaggedsongsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Song {
                get {
                    try {
                        return ((int)(this[this.tableflaggedsongs.SongColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Song\' in table \'flaggedsongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableflaggedsongs.SongColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlaggedSongID {
                get {
                    return ((int)(this[this.tableflaggedsongs.FlaggedSongIDColumn]));
                }
                set {
                    this[this.tableflaggedsongs.FlaggedSongIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int FlagID {
                get {
                    try {
                        return ((int)(this[this.tableflaggedsongs.FlagIDColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FlagID\' in table \'flaggedsongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableflaggedsongs.FlagIDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSongNull() {
                return this.IsNull(this.tableflaggedsongs.SongColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSongNull() {
                this[this.tableflaggedsongs.SongColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagIDNull() {
                return this.IsNull(this.tableflaggedsongs.FlagIDColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagIDNull() {
                this[this.tableflaggedsongs.FlagIDColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewTOCArtistRow : System.Data.DataRow {
            
            private ViewTOCArtistDataTable tableViewTOCArtist;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewTOCArtistRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewTOCArtist = ((ViewTOCArtistDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistAndTitle {
                get {
                    try {
                        return ((string)(this[this.tableViewTOCArtist.ArtistAndTitleColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistAndTitle\' in table \'ViewTOCArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTOCArtist.ArtistAndTitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullTitle {
                get {
                    return ((string)(this[this.tableViewTOCArtist.FullTitleColumn]));
                }
                set {
                    this[this.tableViewTOCArtist.FullTitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullArtistName {
                get {
                    try {
                        return ((string)(this[this.tableViewTOCArtist.FullArtistNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullArtistName\' in table \'ViewTOCArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTOCArtist.FullArtistNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageNumber {
                get {
                    try {
                        return ((int)(this[this.tableViewTOCArtist.PageNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageNumber\' in table \'ViewTOCArtist\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTOCArtist.PageNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistAndTitleNull() {
                return this.IsNull(this.tableViewTOCArtist.ArtistAndTitleColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistAndTitleNull() {
                this[this.tableViewTOCArtist.ArtistAndTitleColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullArtistNameNull() {
                return this.IsNull(this.tableViewTOCArtist.FullArtistNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullArtistNameNull() {
                this[this.tableViewTOCArtist.FullArtistNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageNumberNull() {
                return this.IsNull(this.tableViewTOCArtist.PageNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageNumberNull() {
                this[this.tableViewTOCArtist.PageNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewTOCTitleRow : System.Data.DataRow {
            
            private ViewTOCTitleDataTable tableViewTOCTitle;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewTOCTitleRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewTOCTitle = ((ViewTOCTitleDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitleAndArtist {
                get {
                    return ((string)(this[this.tableViewTOCTitle.TitleAndArtistColumn]));
                }
                set {
                    this[this.tableViewTOCTitle.TitleAndArtistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageNumber {
                get {
                    try {
                        return ((int)(this[this.tableViewTOCTitle.PageNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageNumber\' in table \'ViewTOCTitle\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewTOCTitle.PageNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageNumberNull() {
                return this.IsNull(this.tableViewTOCTitle.PageNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageNumberNull() {
                this[this.tableViewTOCTitle.PageNumberColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewSongsRow : System.Data.DataRow {
            
            private ViewSongsDataTable tableViewSongs;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewSongsRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewSongs = ((ViewSongsDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitlePrefix {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.TitlePrefixColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TitlePrefix\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.TitlePrefixColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableViewSongs.TitleColumn]));
                }
                set {
                    this[this.tableViewSongs.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Code\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SongKey {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.SongKeyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SongKey\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.SongKeyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Comment {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.CommentColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Comment\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.CommentColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int PageNumber {
                get {
                    try {
                        return ((int)(this[this.tableViewSongs.PageNumberColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'PageNumber\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.PageNumberColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Category {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.CategoryColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Category\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.CategoryColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte SongbookOnly {
                get {
                    try {
                        return ((byte)(this[this.tableViewSongs.SongbookOnlyColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'SongbookOnly\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.SongbookOnlyColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableViewSongs.IDColumn]));
                }
                set {
                    this[this.tableViewSongs.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Artist {
                get {
                    try {
                        return ((int)(this[this.tableViewSongs.ArtistColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Artist\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.ArtistColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistFirstName {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.ArtistFirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistFirstName\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.ArtistFirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistLastName {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.ArtistLastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistLastName\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.ArtistLastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullTitle {
                get {
                    return ((string)(this[this.tableViewSongs.FullTitleColumn]));
                }
                set {
                    this[this.tableViewSongs.FullTitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FullArtistName {
                get {
                    try {
                        return ((string)(this[this.tableViewSongs.FullArtistNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'FullArtistName\' in table \'ViewSongs\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongs.FullArtistNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitlePrefixNull() {
                return this.IsNull(this.tableViewSongs.TitlePrefixColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitlePrefixNull() {
                this[this.tableViewSongs.TitlePrefixColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableViewSongs.CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableViewSongs.CodeColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSongKeyNull() {
                return this.IsNull(this.tableViewSongs.SongKeyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSongKeyNull() {
                this[this.tableViewSongs.SongKeyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCommentNull() {
                return this.IsNull(this.tableViewSongs.CommentColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCommentNull() {
                this[this.tableViewSongs.CommentColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPageNumberNull() {
                return this.IsNull(this.tableViewSongs.PageNumberColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPageNumberNull() {
                this[this.tableViewSongs.PageNumberColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCategoryNull() {
                return this.IsNull(this.tableViewSongs.CategoryColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCategoryNull() {
                this[this.tableViewSongs.CategoryColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSongbookOnlyNull() {
                return this.IsNull(this.tableViewSongs.SongbookOnlyColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSongbookOnlyNull() {
                this[this.tableViewSongs.SongbookOnlyColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistNull() {
                return this.IsNull(this.tableViewSongs.ArtistColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistNull() {
                this[this.tableViewSongs.ArtistColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistFirstNameNull() {
                return this.IsNull(this.tableViewSongs.ArtistFirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistFirstNameNull() {
                this[this.tableViewSongs.ArtistFirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistLastNameNull() {
                return this.IsNull(this.tableViewSongs.ArtistLastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistLastNameNull() {
                this[this.tableViewSongs.ArtistLastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFullArtistNameNull() {
                return this.IsNull(this.tableViewSongs.FullArtistNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFullArtistNameNull() {
                this[this.tableViewSongs.FullArtistNameColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ViewSongsSingleFieldRow : System.Data.DataRow {
            
            private ViewSongsSingleFieldDataTable tableViewSongsSingleField;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ViewSongsSingleFieldRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableViewSongsSingleField = ((ViewSongsSingleFieldDataTable)(this.Table));
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SongFull {
                get {
                    return ((string)(this[this.tableViewSongsSingleField.SongFullColumn]));
                }
                set {
                    this[this.tableViewSongsSingleField.SongFullColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SongFullArtistFirst {
                get {
                    return ((string)(this[this.tableViewSongsSingleField.SongFullArtistFirstColumn]));
                }
                set {
                    this[this.tableViewSongsSingleField.SongFullArtistFirstColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistFirstName {
                get {
                    try {
                        return ((string)(this[this.tableViewSongsSingleField.ArtistFirstNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistFirstName\' in table \'ViewSongsSingleField\' is DBNull." +
                                "", e);
                    }
                }
                set {
                    this[this.tableViewSongsSingleField.ArtistFirstNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ArtistLastName {
                get {
                    try {
                        return ((string)(this[this.tableViewSongsSingleField.ArtistLastNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'ArtistLastName\' in table \'ViewSongsSingleField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongsSingleField.ArtistLastNameColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    return ((string)(this[this.tableViewSongsSingleField.TitleColumn]));
                }
                set {
                    this[this.tableViewSongsSingleField.TitleColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TitlePrefix {
                get {
                    try {
                        return ((string)(this[this.tableViewSongsSingleField.TitlePrefixColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'TitlePrefix\' in table \'ViewSongsSingleField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongsSingleField.TitlePrefixColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    return ((int)(this[this.tableViewSongsSingleField.IDColumn]));
                }
                set {
                    this[this.tableViewSongsSingleField.IDColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Code {
                get {
                    try {
                        return ((string)(this[this.tableViewSongsSingleField.CodeColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("The value for column \'Code\' in table \'ViewSongsSingleField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableViewSongsSingleField.CodeColumn] = value;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistFirstNameNull() {
                return this.IsNull(this.tableViewSongsSingleField.ArtistFirstNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistFirstNameNull() {
                this[this.tableViewSongsSingleField.ArtistFirstNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsArtistLastNameNull() {
                return this.IsNull(this.tableViewSongsSingleField.ArtistLastNameColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetArtistLastNameNull() {
                this[this.tableViewSongsSingleField.ArtistLastNameColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitlePrefixNull() {
                return this.IsNull(this.tableViewSongsSingleField.TitlePrefixColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitlePrefixNull() {
                this[this.tableViewSongsSingleField.TitlePrefixColumn] = System.Convert.DBNull;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCodeNull() {
                return this.IsNull(this.tableViewSongsSingleField.CodeColumn);
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCodeNull() {
                this[this.tableViewSongsSingleField.CodeColumn] = System.Convert.DBNull;
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class songsRowChangeEvent : System.EventArgs {
            
            private songsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsRowChangeEvent(songsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public songsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class artistsRowChangeEvent : System.EventArgs {
            
            private artistsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsRowChangeEvent(artistsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public artistsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class flagsRowChangeEvent : System.EventArgs {
            
            private flagsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsRowChangeEvent(flagsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flagsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewArtistNameForListBoxRowChangeEvent : System.EventArgs {
            
            private ViewArtistNameForListBoxRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxRowChangeEvent(ViewArtistNameForListBoxRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewArtistNameForListBoxRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class flaggedsongsRowChangeEvent : System.EventArgs {
            
            private flaggedsongsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsRowChangeEvent(flaggedsongsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public flaggedsongsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewTOCArtistRowChangeEvent : System.EventArgs {
            
            private ViewTOCArtistRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCArtistRowChangeEvent(ViewTOCArtistRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCArtistRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewTOCTitleRowChangeEvent : System.EventArgs {
            
            private ViewTOCTitleRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCTitleRowChangeEvent(ViewTOCTitleRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewTOCTitleRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewSongsRowChangeEvent : System.EventArgs {
            
            private ViewSongsRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsRowChangeEvent(ViewSongsRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ViewSongsSingleFieldRowChangeEvent : System.EventArgs {
            
            private ViewSongsSingleFieldRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsSingleFieldRowChangeEvent(ViewSongsSingleFieldRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ViewSongsSingleFieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace Songs.DataSet1TableAdapters {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class songsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public songsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "songs";
            tableMapping.ColumnMappings.Add("TitlePrefix", "TitlePrefix");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("SongKey", "SongKey");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("SongbookOnly", "SongbookOnly");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Artist", "Artist");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM songs WHERE ((ID = ?))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_ID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO songs (TitlePrefix, Title, Code, SongKey, Comment, PageN" +
                "umber, Category, SongbookOnly, Artist) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)" +
                "";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("TitlePrefix", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitlePrefix", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Title", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Code", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Code", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("SongKey", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SongKey", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Comment", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("PageNumber", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PageNumber", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Category", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Category", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("SongbookOnly", System.Data.Odbc.OdbcType.TinyInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SongbookOnly", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Artist", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Artist", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE songs SET TitlePrefix = ?, Title = ?, Code = ?, SongKey = ?, Co" +
                "mment = ?, PageNumber = ?, Category = ?, SongbookOnly = ?, Artist = ? W" +
                "HERE ((ID = ?))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("TitlePrefix", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "TitlePrefix", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Title", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Title", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Code", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Code", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("SongKey", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SongKey", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Comment", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Comment", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("PageNumber", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "PageNumber", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Category", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Category", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("SongbookOnly", System.Data.Odbc.OdbcType.TinyInt, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "SongbookOnly", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Artist", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Artist", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_ID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[2];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TitlePrefix, Title, Code, SongKey, Comment, PageNumber, Category, Song" +
                "bookOnly, ID, Artist\r\nFROM         songs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     TitlePrefix, Title, Code, SongKey, Comment, PageNumber, Category, Song" +
                "bookOnly, ID, Artist\r\nFROM         songs\r\nWHERE     (ID = ?)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.Odbc.OdbcParameter("ID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ID", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.songsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillByID(DataSet1.songsDataTable dataTable, int ID) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            this.Adapter.SelectCommand.Parameters[0].Value = ((int)(ID));
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.songsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "songs");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_ID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(string TitlePrefix, string Title, string Code, string SongKey, string Comment, System.Nullable<int> PageNumber, string Category, System.Nullable<byte> SongbookOnly, System.Nullable<int> Artist) {
            if ((TitlePrefix == null)) {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(TitlePrefix));
            }
            if ((Title == null)) {
                throw new System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(Title));
            }
            if ((Code == null)) {
                this.Adapter.InsertCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[2].Value = ((string)(Code));
            }
            if ((SongKey == null)) {
                this.Adapter.InsertCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[3].Value = ((string)(SongKey));
            }
            if ((Comment == null)) {
                this.Adapter.InsertCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(Comment));
            }
            if ((PageNumber.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[5].Value = ((int)(PageNumber.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Category == null)) {
                this.Adapter.InsertCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = ((string)(Category));
            }
            if ((SongbookOnly.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((byte)(SongbookOnly.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Artist.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[8].Value = ((int)(Artist.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(string TitlePrefix, string Title, string Code, string SongKey, string Comment, System.Nullable<int> PageNumber, string Category, System.Nullable<byte> SongbookOnly, System.Nullable<int> Artist, int Original_ID) {
            if ((TitlePrefix == null)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(TitlePrefix));
            }
            if ((Title == null)) {
                throw new System.ArgumentNullException("Title");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(Title));
            }
            if ((Code == null)) {
                this.Adapter.UpdateCommand.Parameters[2].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[2].Value = ((string)(Code));
            }
            if ((SongKey == null)) {
                this.Adapter.UpdateCommand.Parameters[3].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[3].Value = ((string)(SongKey));
            }
            if ((Comment == null)) {
                this.Adapter.UpdateCommand.Parameters[4].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(Comment));
            }
            if ((PageNumber.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((int)(PageNumber.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = System.DBNull.Value;
            }
            if ((Category == null)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((string)(Category));
            }
            if ((SongbookOnly.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((byte)(SongbookOnly.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = System.DBNull.Value;
            }
            if ((Artist.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((int)(Artist.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((int)(Original_ID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class artistsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public artistsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "artists";
            tableMapping.ColumnMappings.Add("ArtistFirstName", "ArtistFirstName");
            tableMapping.ColumnMappings.Add("ArtistLastName", "ArtistLastName");
            tableMapping.ColumnMappings.Add("ArtistID", "ArtistID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM artists WHERE ((ArtistID = ?))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_ArtistID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ArtistID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO artists (ArtistFirstName, ArtistLastName) VALUES (?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("ArtistFirstName", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ArtistFirstName", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("ArtistLastName", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ArtistLastName", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE artists SET ArtistFirstName = ?, ArtistLastName = ? WHERE ((ArtistI" +
                "D = ?))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("ArtistFirstName", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ArtistFirstName", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("ArtistLastName", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ArtistLastName", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_ArtistID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "ArtistID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ArtistFirstName, ArtistLastName, ArtistID\r\nFROM         artists ORDER BY ArtistLastName, ArtistFirstName";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.artistsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.artistsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "artists");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class flagsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public flagsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "flags";
            tableMapping.ColumnMappings.Add("FlagID", "FlagID");
            tableMapping.ColumnMappings.Add("FlagName", "FlagName");
            tableMapping.ColumnMappings.Add("FlagDescription", "FlagDescription");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM flags WHERE ((FlagID = ?))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_FlagID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO flags (FlagName, FlagDescription) VALUES (?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("FlagName", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagName", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("FlagDescription", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagDescription", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE flags SET FlagName = ?, FlagDescription = ? WHERE ((FlagID = ?))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("FlagName", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagName", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("FlagDescription", System.Data.Odbc.OdbcType.VarChar, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagDescription", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_FlagID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     FlagID, FlagName, FlagDescription\r\nFROM         flags ORDER BY FlagName";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.flagsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.flagsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "flags");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewArtistNameForListBoxTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewArtistNameForListBoxTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewArtistNameForListBox";
            tableMapping.ColumnMappings.Add("Name", "Name");
            tableMapping.ColumnMappings.Add("ArtistLastName", "ArtistLastName");
            tableMapping.ColumnMappings.Add("Artist", "Artist");
            tableMapping.ColumnMappings.Add("ArtistFirstName", "ArtistFirstName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     Name, ArtistLastName, Artist, ArtistFirstName\r\nFROM         ViewArtist" +
                "NameForListBox";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ViewArtistNameForListBoxDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class flaggedsongsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public flaggedsongsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "flaggedsongs";
            tableMapping.ColumnMappings.Add("Song", "Song");
            tableMapping.ColumnMappings.Add("FlaggedSongID", "FlaggedSongID");
            tableMapping.ColumnMappings.Add("FlagID", "FlagID");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = "DELETE FROM flaggedsongs WHERE ((FlaggedSongID = ?))";
            this._adapter.DeleteCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_FlaggedSongID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlaggedSongID", System.Data.DataRowVersion.Original, false, null));
            this._adapter.InsertCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO flaggedsongs (Song, FlagID) VALUES (?, ?)";
            this._adapter.InsertCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Song", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Song", System.Data.DataRowVersion.Current, false, null));
            this._adapter.InsertCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("FlagID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand = new System.Data.Odbc.OdbcCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE flaggedsongs SET Song = ?, FlagID = ? WHERE ((FlaggedSongID = ?))";
            this._adapter.UpdateCommand.CommandType = System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Song", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Song", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("FlagID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlagID", System.Data.DataRowVersion.Current, false, null));
            this._adapter.UpdateCommand.Parameters.Add(new System.Data.Odbc.OdbcParameter("Original_FlaggedSongID", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "FlaggedSongID", System.Data.DataRowVersion.Original, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[2];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     Song, FlaggedSongID, FlagID\r\nFROM         flaggedsongs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[1].Connection = this.Connection;
            this._commandCollection[1].CommandText = "SELECT     Song, FlaggedSongID, FlagID\r\nFROM         flaggedsongs\r\nWHERE     (Son" +
                "g = ?)";
            this._commandCollection[1].CommandType = System.Data.CommandType.Text;
            this._commandCollection[1].Parameters.Add(new System.Data.Odbc.OdbcParameter("Song", System.Data.Odbc.OdbcType.Int, 0, System.Data.ParameterDirection.Input, ((byte)(0)), ((byte)(0)), "Song", System.Data.DataRowVersion.Current, false, null));
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.flaggedsongsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, false)]
        public virtual int FillBySong(DataSet1.flaggedsongsDataTable dataTable, System.Nullable<int> Song) {
            this.Adapter.SelectCommand = this.CommandCollection[1];
            if ((Song.HasValue == true)) {
                this.Adapter.SelectCommand.Parameters[0].Value = ((int)(Song.Value));
            }
            else {
                this.Adapter.SelectCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1.flaggedsongsDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(DataSet1 dataSet) {
            return this.Adapter.Update(dataSet, "flaggedsongs");
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow dataRow) {
            return this.Adapter.Update(new System.Data.DataRow[] {
                        dataRow});
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(int Original_FlaggedSongID) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_FlaggedSongID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(System.Nullable<int> Song, System.Nullable<int> FlagID) {
            if ((Song.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[0].Value = ((int)(Song.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((FlagID.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[1].Value = ((int)(FlagID.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = System.DBNull.Value;
            }
            System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(System.Nullable<int> Song, System.Nullable<int> FlagID, int Original_FlaggedSongID) {
            if ((Song.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((int)(Song.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = System.DBNull.Value;
            }
            if ((FlagID.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((int)(FlagID.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((int)(Original_FlaggedSongID));
            System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & System.Data.ConnectionState.Open) 
                        != System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewTOCArtistTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewTOCArtistTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewTOCArtist";
            tableMapping.ColumnMappings.Add("ArtistAndTitle", "ArtistAndTitle");
            tableMapping.ColumnMappings.Add("FullTitle", "FullTitle");
            tableMapping.ColumnMappings.Add("FullArtistName", "FullArtistName");
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     ArtistAndTitle, FullTitle, FullArtistName, PageNumber\r\nFROM         Vi" +
                "ewTOCArtist";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ViewTOCArtistDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewTOCTitleTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewTOCTitleTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewTOCTitle";
            tableMapping.ColumnMappings.Add("TitleAndArtist", "TitleAndArtist");
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TitleAndArtist, PageNumber\r\nFROM         ViewTOCTitle";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ViewTOCTitleDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewSongsTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewSongsTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewSongs";
            tableMapping.ColumnMappings.Add("TitlePrefix", "TitlePrefix");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("Code", "Code");
            tableMapping.ColumnMappings.Add("SongKey", "SongKey");
            tableMapping.ColumnMappings.Add("Comment", "Comment");
            tableMapping.ColumnMappings.Add("PageNumber", "PageNumber");
            tableMapping.ColumnMappings.Add("Category", "Category");
            tableMapping.ColumnMappings.Add("SongbookOnly", "SongbookOnly");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Artist", "Artist");
            tableMapping.ColumnMappings.Add("ArtistFirstName", "ArtistFirstName");
            tableMapping.ColumnMappings.Add("ArtistLastName", "ArtistLastName");
            tableMapping.ColumnMappings.Add("FullTitle", "FullTitle");
            tableMapping.ColumnMappings.Add("FullArtistName", "FullArtistName");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     TitlePrefix, Title, Code, SongKey, Comment, PageNumber, Category, Song" +
                "bookOnly, ID, Artist, ArtistFirstName, ArtistLastName, FullTitle, \r\n            " +
                "          FullArtistName\r\nFROM         ViewSongs";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ViewSongsDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.ComponentModel.DataObjectAttribute(true)]
    [System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class ViewSongsSingleFieldTableAdapter : System.ComponentModel.Component {
        
        private System.Data.Odbc.OdbcDataAdapter _adapter;
        
        private System.Data.Odbc.OdbcConnection _connection;
        
        private System.Data.Odbc.OdbcCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewSongsSingleFieldTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private System.Data.Odbc.OdbcDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal System.Data.Odbc.OdbcConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((System.Data.Odbc.OdbcCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected System.Data.Odbc.OdbcCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitAdapter() {
            this._adapter = new System.Data.Odbc.OdbcDataAdapter();
            System.Data.Common.DataTableMapping tableMapping = new System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "ViewSongsSingleField";
            tableMapping.ColumnMappings.Add("SongFull", "SongFull");
            tableMapping.ColumnMappings.Add("SongFullArtistFirst", "SongFullArtistFirst");
            tableMapping.ColumnMappings.Add("ArtistFirstName", "ArtistFirstName");
            tableMapping.ColumnMappings.Add("ArtistLastName", "ArtistLastName");
            tableMapping.ColumnMappings.Add("Title", "Title");
            tableMapping.ColumnMappings.Add("TitlePrefix", "TitlePrefix");
            tableMapping.ColumnMappings.Add("ID", "ID");
            tableMapping.ColumnMappings.Add("Code", "Code");
            this._adapter.TableMappings.Add(tableMapping);
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitConnection() {
            this._connection = new System.Data.Odbc.OdbcConnection();
            this._connection.ConnectionString = global::Songs.Properties.Settings.Default.MainConnectionString;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitCommandCollection() {
            this._commandCollection = new System.Data.Odbc.OdbcCommand[1];
            this._commandCollection[0] = new System.Data.Odbc.OdbcCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = "SELECT     SongFull, SongFullArtistFirst, ArtistFirstName, ArtistLastName, Title," +
                " TitlePrefix, ID, Code\r\nFROM         ViewSongsSingleField";
            this._commandCollection[0].CommandType = System.Data.CommandType.Text;
        }
        
        [System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [System.ComponentModel.DataObjectMethodAttribute(System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(DataSet1.ViewSongsSingleFieldDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
    }
}

#pragma warning restore 1591